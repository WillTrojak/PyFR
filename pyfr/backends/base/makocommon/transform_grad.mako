# -*- coding: utf-8 -*-
<%namespace module='pyfr.backends.base.makoutil' name='pyfr'/>

<% t_tol = 0.99 %>

// Transforms to m=[1,0,0]^T
// See Moler and Hughes 1999
<%pyfr:macro name='transform_grad_to' params='n, u, t, offset'>

% if ndims == 2:
    t[o + 0] =  n[0]*n[0]*u[o + 0] + n[0]*n[1]*u[o + 1] + n[0]*n[1]*u[o + 2] + n[1]*n[1]*u[o + 3];
    t[o + 1] = -n[0]*n[1]*u[o + 0] + n[0]*n[0]*u[o + 1] - n[1]*n[1]*u[o + 2] + n[0]*n[1]*u[o + 3];
    t[o + 2] = -n[0]*n[1]*u[o + 0] - n[1]*n[1]*u[o + 1] + n[0]*n[0]*u[o + 2] + n[0]*n[1]*u[o + 3];
    t[o + 3] =  n[1]*n[1]*u[o + 0] - n[0]*n[1]*u[o + 1] - n[0]*n[1]*u[o + 2] + n[0]*n[0]*u[o + 3];
% elif ndims == 3:
    fpdtype_t r[${ndoims*ndims}];
    if (fabs(n[0]) < ${t_tol})
    {
        fpdtype_t h = 1/(1 + n[0]);
        r[0] = n[0];
        r[1] = n[1];
        r[2] = n[2];
        r[3] = -n[1];
        r[4] = n[0] + h*n[2]*n[2];
        r[5] = -h*n[1]*n[2];
        r[6] = -n[2];
        r[7] = -h*n[1]*n[2];
        r[8] = n[0] + h*n[1]*n[1];
    }
    else if (fabs(n[1]) < fabs(n[2]))
    {
        fpdtype_t h = 1/(1 - n[1]);
        r[0] = n[0];
        r[1] = n[1];
        r[2] = n[2];
        r[3] = 1 - h*n[0]*n[0];
        r[4] = n[0];
        r[5] = -h*n[0]*n[2];
        r[6] = -h*n[0]*n[2];
        r[7] = n[2];
        r[8] = 1 - h*n[2]*n[2];
    }
    else
    {
        fpdtype_t h = 1/(1 - n[2]);
        r[0] = n[0];
        r[1] = n[1];
        r[2] = n[2];
        r[3] = -h*n[0]*n[1];
        r[4] = 1 - h*n[1]*n[1];
        r[5] = n[1];
        r[6] = 1 - h*n[0]*n[0];
        r[7] = -h*n[0]*n[1];
        r[8] = n[0];
    }
    t[o + 0] = r[0]*(r[0]*u[o + 0] + r[1]*u[o + 1] + r[2]*u[o + 2]) + r[1]*(r[0]*u[o + 3] + r[1]*u[o + 4] + r[2]*u[o + 5]) + r[2]*(r[0]*u[o + 6] + r[1]*u[o + 7] + r[2]*u[o + 8]);
    t[o + 1] = r[0]*(r[3]*u[o + 0] + r[4]*u[o + 1] + r[5]*u[o + 2]) + r[1]*(r[3]*u[o + 3] + r[4]*u[o + 4] + r[5]*u[o + 5]) + r[2]*(r[3]*u[o + 6] + r[4]*u[o + 7] + r[5]*u[o + 8]);
    t[o + 2] = r[0]*(r[6]*u[o + 0] + r[7]*u[o + 1] + r[8]*u[o + 2]) + r[1]*(r[6]*u[o + 3] + r[7]*u[o + 4] + r[8]*u[o + 5]) + r[2]*(r[6]*u[o + 6] + r[7]*u[o + 7] + r[8]*u[o + 8]);
    t[o + 3] = r[3]*(r[0]*u[o + 0] + r[1]*u[o + 1] + r[2]*u[o + 2]) + r[4]*(r[0]*u[o + 3] + r[1]*u[o + 4] + r[2]*u[o + 5]) + r[5]*(r[0]*u[o + 6] + r[1]*u[o + 7] + r[2]*u[o + 8]);
    t[o + 4] = r[3]*(r[3]*u[o + 0] + r[4]*u[o + 1] + r[5]*u[o + 2]) + r[4]*(r[3]*u[o + 3] + r[4]*u[o + 4] + r[5]*u[o + 5]) + r[5]*(r[3]*u[o + 6] + r[4]*u[o + 7] + r[5]*u[o + 8]);
    t[o + 5] = r[3]*(r[6]*u[o + 0] + r[7]*u[o + 1] + r[8]*u[o + 2]) + r[4]*(r[6]*u[o + 3] + r[7]*u[o + 4] + r[8]*u[o + 5]) + r[5]*(r[6]*u[o + 6] + r[7]*u[o + 7] + r[8]*u[o + 8]);
    t[o + 6] = r[6]*(r[0]*u[o + 0] + r[1]*u[o + 1] + r[2]*u[o + 2]) + r[7]*(r[0]*u[o + 3] + r[1]*u[o + 4] + r[2]*u[o + 5]) + r[8]*(r[0]*u[o + 6] + r[1]*u[o + 7] + r[2]*u[o + 8]);
    t[o + 7] = r[6]*(r[3]*u[o + 0] + r[4]*u[o + 1] + r[5]*u[o + 2]) + r[7]*(r[3]*u[o + 3] + r[4]*u[o + 4] + r[5]*u[o + 5]) + r[8]*(r[3]*u[o + 6] + r[4]*u[o + 7] + r[5]*u[o + 8]);
    t[o + 8] = r[6]*(r[6]*u[o + 0] + r[7]*u[o + 1] + r[8]*u[o + 2]) + r[7]*(r[6]*u[o + 3] + r[7]*u[o + 4] + r[8]*u[o + 5]) + r[8]*(r[6]*u[o + 6] + r[7]*u[o + 7] + r[8]*u[o + 8]);
% endif
</%pyfr:macro>

// Transforms from m=[1,0,0]^T
<%pyfr:macro name='transform_grad_from' params='n, t, u, o'>

% if ndims == 2:
    u[o + 0] =  n[0]*n[0]*t[o + 0] - n[0]*n[1]*t[o + 1] + n[1]*(-n[0]*t[o + 2] + n[1]*t[o + 3]);
    u[o + 1] =  n[0]*n[1]*t[o + 0] + n[0]*n[0]*t[o + 1] - n[1]*( n[1]*t[o + 2] + n[0]*t[o + 3]);
    u[o + 2] =  n[0]*n[1]*t[o + 0] - n[1]*n[1]*t[o + 1] + n[0]*n[0]*t[o + 2] - n[0]*n[1]*t[o + 3];
    u[o + 3] =  n[1]*n[1]*t[o + 0] + n[0]*n[1]*t[o + 1] + n[0]*n[1]*t[o + 2] + n[0]*n[0]*t[o + 3];
% elif ndims == 3:
    fpdtype_t r[${ndoims*ndims}];
    if (fabs(n[0]) < ${t_tol})
    {
        fpdtype_t h = 1/(1 + n[0]);
        r[0] =  n[0];
        r[1] = -n[1];
        r[2] = -n[2];
        r[3] =  n[1];
        r[4] =  n[0] + h*n[2]*n[2];
        r[5] = -h*n[1]*n[2];
        r[6] =  n[2];
        r[7] = -h*n[1]*n[2];
        r[8] =  n[0] + h*n[1]*n[1];
    }
    else if (fabs(n[1]) < fabs(n[2]))
    {
        fpdtype_t h = 1/(1 - n[1]);
        r[0] =  n[0];
        r[1] =  1 - h*n[0]*n[0];
        r[2] = -h*n[0]*n[2];
        r[3] =  n[1];
        r[4] =  n[0];
        r[5] =  n[2];
        r[6] =  n[2];
        r[7] = -h*n[0]*n[2];
        r[8] =  1 - h*n[2]*n[2];
    }
    else
    {
        fpdtype_t h = 1/(1 - n[2]);
        r[0] =  n[0];
        r[1] = -h*n[0]*n[1];
        r[2] =  1 - h*n[0]*n[0];
        r[3] =  n[1];
        r[4] =  1 - h*n[1]*n[1];
        r[5] = -h*n[0]*n[1];
        r[6] =  n[2];
        r[7] =  n[1];
        r[8] =  n[0];
    }
    u[o + 0] = r[0]*(r[0]*t[o + 0] + r[1]*t[o + 1] + r[2]*t[o + 2]) + r[1]*(r[0]*t[o + 3] + r[1]*t[o + 4] + r[2]*t[o + 5]) + r[2]*(r[0]*t[o + 6] + r[1]*t[o + 7] + r[2]*t[o + 8]);
    u[o + 1] = r[0]*(r[3]*t[o + 0] + r[4]*t[o + 1] + r[5]*t[o + 2]) + r[1]*(r[3]*t[o + 3] + r[4]*t[o + 4] + r[5]*t[o + 5]) + r[2]*(r[3]*t[o + 6] + r[4]*t[o + 7] + r[5]*t[o + 8]);
    u[o + 2] = r[0]*(r[6]*t[o + 0] + r[7]*t[o + 1] + r[8]*t[o + 2]) + r[1]*(r[6]*t[o + 3] + r[7]*t[o + 4] + r[8]*t[o + 5]) + r[2]*(r[6]*t[o + 6] + r[7]*t[o + 7] + r[8]*t[o + 8]);
    u[o + 3] = r[3]*(r[0]*t[o + 0] + r[1]*t[o + 1] + r[2]*t[o + 2]) + r[4]*(r[0]*t[o + 3] + r[1]*t[o + 4] + r[2]*t[o + 5]) + r[5]*(r[0]*t[o + 6] + r[1]*t[o + 7] + r[2]*t[o + 8]);
    u[o + 4] = r[3]*(r[3]*t[o + 0] + r[4]*t[o + 1] + r[5]*t[o + 2]) + r[4]*(r[3]*t[o + 3] + r[4]*t[o + 4] + r[5]*t[o + 5]) + r[5]*(r[3]*t[o + 6] + r[4]*t[o + 7] + r[5]*t[o + 8]);
    u[o + 5] = r[3]*(r[6]*t[o + 0] + r[7]*t[o + 1] + r[8]*t[o + 2]) + r[4]*(r[6]*t[o + 3] + r[7]*t[o + 4] + r[8]*t[o + 5]) + r[5]*(r[6]*t[o + 6] + r[7]*t[o + 7] + r[8]*t[o + 8]);
    u[o + 6] = r[6]*(r[0]*t[o + 0] + r[1]*t[o + 1] + r[2]*t[o + 2]) + r[7]*(r[0]*t[o + 3] + r[1]*t[o + 4] + r[2]*t[o + 5]) + r[8]*(r[0]*t[o + 6] + r[1]*t[o + 7] + r[2]*t[o + 8]);
    u[o + 7] = r[6]*(r[3]*t[o + 0] + r[4]*t[o + 1] + r[5]*t[o + 2]) + r[7]*(r[3]*t[o + 3] + r[4]*t[o + 4] + r[5]*t[o + 5]) + r[8]*(r[3]*t[o + 6] + r[4]*t[o + 7] + r[5]*t[o + 8]);
    u[o + 8] = r[6]*(r[6]*t[o + 0] + r[7]*t[o + 1] + r[8]*t[o + 2]) + r[7]*(r[6]*t[o + 3] + r[7]*t[o + 4] + r[8]*t[o + 5]) + r[8]*(r[6]*t[o + 6] + r[7]*t[o + 7] + r[8]*t[o + 8]);
% endif
</%pyfr:macro>
